//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::CommitArgs;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const COMMIT_DISCRIMINATOR: u64 = 2;

/// Accounts.
#[derive(Debug)]
pub struct Commit {
    pub validator: solana_pubkey::Pubkey,

    pub delegated_account: solana_pubkey::Pubkey,
}

impl Commit {
    pub fn instruction(
        &self,
        args: CommitInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CommitInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts
            .push(solana_instruction::AccountMeta::new(self.validator, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.delegated_account,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CommitInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::COMPRESSED_DELEGATION_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CommitInstructionData {
    discriminator: u64,
}

impl CommitInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 2 }
    }
}

impl Default for CommitInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CommitInstructionArgs {
    pub args: CommitArgs,
}

/// Instruction builder for `Commit`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` validator
///   1. `[]` delegated_account
#[derive(Clone, Debug, Default)]
pub struct CommitBuilder {
    validator: Option<solana_pubkey::Pubkey>,
    delegated_account: Option<solana_pubkey::Pubkey>,
    args: Option<CommitArgs>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CommitBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn validator(&mut self, validator: solana_pubkey::Pubkey) -> &mut Self {
        self.validator = Some(validator);
        self
    }
    #[inline(always)]
    pub fn delegated_account(
        &mut self,
        delegated_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.delegated_account = Some(delegated_account);
        self
    }
    #[inline(always)]
    pub fn args(&mut self, args: CommitArgs) -> &mut Self {
        self.args = Some(args);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = Commit {
            validator: self.validator.expect("validator is not set"),
            delegated_account: self
                .delegated_account
                .expect("delegated_account is not set"),
        };
        let args = CommitInstructionArgs {
            args: self.args.clone().expect("args is not set"),
        };

        accounts.instruction_with_remaining_accounts(
            args,
            &self.__remaining_accounts,
        )
    }
}

/// `commit` CPI accounts.
pub struct CommitCpiAccounts<'a, 'b> {
    pub validator: &'b solana_account_info::AccountInfo<'a>,

    pub delegated_account: &'b solana_account_info::AccountInfo<'a>,
}

/// `commit` CPI instruction.
pub struct CommitCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub validator: &'b solana_account_info::AccountInfo<'a>,

    pub delegated_account: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CommitInstructionArgs,
}

impl<'a, 'b> CommitCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: CommitCpiAccounts<'a, 'b>,
        args: CommitInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            validator: accounts.validator,
            delegated_account: accounts.delegated_account,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.validator.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.delegated_account.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CommitInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::COMPRESSED_DELEGATION_ID,
            accounts,
            data,
        };
        let mut account_infos =
            Vec::with_capacity(3 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.validator.clone());
        account_infos.push(self.delegated_account.clone());
        remaining_accounts.iter().for_each(|remaining_account| {
            account_infos.push(remaining_account.0.clone())
        });

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(
                &instruction,
                &account_infos,
                signers_seeds,
            )
        }
    }
}

/// Instruction builder for `Commit` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` validator
///   1. `[]` delegated_account
#[derive(Clone, Debug)]
pub struct CommitCpiBuilder<'a, 'b> {
    instruction: Box<CommitCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CommitCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CommitCpiBuilderInstruction {
            __program: program,
            validator: None,
            delegated_account: None,
            args: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn validator(
        &mut self,
        validator: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.validator = Some(validator);
        self
    }
    #[inline(always)]
    pub fn delegated_account(
        &mut self,
        delegated_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.delegated_account = Some(delegated_account);
        self
    }
    #[inline(always)]
    pub fn args(&mut self, args: CommitArgs) -> &mut Self {
        self.instruction.args = Some(args);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction.__remaining_accounts.push((
            account,
            is_writable,
            is_signer,
        ));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_error::ProgramResult {
        let args = CommitInstructionArgs {
            args: self.instruction.args.clone().expect("args is not set"),
        };
        let instruction = CommitCpi {
            __program: self.instruction.__program,

            validator: self
                .instruction
                .validator
                .expect("validator is not set"),

            delegated_account: self
                .instruction
                .delegated_account
                .expect("delegated_account is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CommitCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    validator: Option<&'b solana_account_info::AccountInfo<'a>>,
    delegated_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    args: Option<CommitArgs>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts:
        Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
