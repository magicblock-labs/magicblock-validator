name: Publish ephemeral validator packages

on:
  pull_request:
  release:
    types: [published]
  push:
    branches:
      - 'release/v*'
  workflow_dispatch:
    inputs:
      release_version:
        description: 'The release version'
        required: true
        default: 'v0.0.1'

jobs:
  publish-npm-binaries:
    name: Publish NPM packages
    runs-on: ${{ matrix.build.os }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - {
            NAME: linux-x64-glibc,
            OS: ubuntu-latest,
            TOOLCHAIN: stable,
            TARGET: x86_64-unknown-linux-gnu,
          }
    #          - {
    #            NAME: linux-x86-glibc,
    #            OS: ubuntu-latest,
    #            TOOLCHAIN: stable,
    #            TARGET: i686-unknown-linux-gnu,
    #          }
    #          - {
    #            NAME: linux-arm64-glibc,
    #            OS: ubuntu-latest,
    #            TOOLCHAIN: stable,
    #            TARGET: aarch64-unknown-linux-gnu,
    #          }
    #          - {
    #            NAME: win32-x64-msvc,
    #            OS: windows-latest,
    #            TOOLCHAIN: stable,
    #            TARGET: x86_64-pc-windows-msvc,
    #          }
    #          - {
    #            NAME: win32-x86-msvc,
    #            OS: windows-latest,
    #            TOOLCHAIN: stable,
    #            TARGET: i686-pc-windows-msvc,
    #          }
    #          - {
    #            NAME: darwin-x64,
    #            OS: macos-latest,
    #            TOOLCHAIN: stable,
    #            TARGET: x86_64-apple-darwin,
    #          }
    #          - {
    #            NAME: darwin-arm64,
    #            OS: macos-latest,
    #            TOOLCHAIN: stable,
    #            TARGET: aarch64-apple-darwin,
    #          }
    steps:
      - name: Checkout this magicblock-validator
        uses: actions/checkout@v4
        with:
          path: magicblock-validator

      - name: Install GCC 9 and build dependencies
        if: matrix.build.OS == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libclang-dev protobuf-compiler cmake pkg-config libssl-dev
          sudo apt-get install -y gcc-9 g++-9

          # Verify GCC installation
          if ! command -v gcc-9 &> /dev/null; then
            echo "ERROR: gcc-9 not found!"
            dpkg -L gcc-9 || echo "GCC-9 package is not correctly installed."
            find / -name gcc-9 2>/dev/null || echo "Could not find gcc-9 in the filesystem."
            exit 1
          fi

          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 90
          sudo update-alternatives --set gcc /usr/bin/gcc-9
          sudo update-alternatives --set g++ /usr/bin/g++-9

          # Set environment variables
          echo "CC=/usr/bin/gcc-9" >> $GITHUB_ENV
          echo "CXX=/usr/bin/g++-9" >> $GITHUB_ENV
          echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "CROSS_CONTAINER_OPTS=-e CC=/usr/bin/gcc-9 -e CXX=/usr/bin/g++-9" >> $GITHUB_ENV

      - name: Verify Compiler and OpenSSL Installation
        run: |
          echo "Checking GCC version:"
          which gcc
          gcc --version
          
          echo "Checking G++ version:"
          which g++
          g++ --version

          echo "Checking OpenSSL version:"
          openssl version || echo "ERROR: OpenSSL is not installed!"
          
          echo "Checking OpenSSL libraries:"
          ls -l /usr/lib/x86_64-linux-gnu/libssl.* || echo "ERROR: OpenSSL libraries missing!"
          
          echo "Checking PKG_CONFIG_PATH:"
          echo $PKG_CONFIG_PATH
          
          echo "Checking OpenSSL via pkg-config:"
          pkg-config --modversion openssl || echo "ERROR: OpenSSL not found via pkg-config!"

      - uses: ./magicblock-validator/.github/actions/setup-build-env
        with:
          build_cache_key_name: "magicblock-validator-ci-test-unit-v000"
          rust_toolchain_release: "1.83.0"
          github_access_token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: ./magicblock-validator/.github/actions/setup-solana

      - name: Build (linux/macos)
        if: matrix.build.OS != 'windows-latest'
        uses: actions-rs/cargo@v1
        env:
          CC: /usr/bin/gcc-9
          CXX: /usr/bin/g++-9
          OPENSSL_DIR: /usr
          OPENSSL_LIB_DIR: /usr/lib/x86_64-linux-gnu
          OPENSSL_INCLUDE_DIR: /usr/include
          OPENSSL_STATIC: 1
        with:
          use-cross: true
          command: build
          args: --manifest-path=magicblock-validator/Cargo.toml  --release --locked --target ${{ matrix.build.TARGET }}

      # The following steps are unchanged from the original workflow, preserving comments
      # to ensure consistency

      - name: Publish the NPM package
        run: |
          echo "DRY_RUN=${{ env.DRY_RUN }}"
          cd ${{ env.node_pkg }}
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm set //registry.npmjs.org/:_authToken ${{ secrets.NPM_TOKEN }}
          if [ "${{ env.DRY_RUN }}" = "true" ]; then
            echo "Running npm publish in dry-run mode"
            npm publish --access public --dry-run
          else
            npm publish --access public
          fi
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

#  publish-wrapper-npm-package:
#    name: Publish wrapper NPM packages
#    runs-on: ubuntu-20.04
#    needs: publish-npm-binaries
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#      - name: Set DRY_RUN based on trigger
#        run: echo "DRY_RUN=true" >> $GITHUB_ENV
#        if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/v')
#      - name: Publish the NPM package
#        shell: bash
#        run: |
#          cd crates/ephemeral-validator/npm-package
#          npm install
#          npm run build
#          cd lib
#          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
#          npm set //registry.npmjs.org/:_authToken ${{ secrets.NPM_TOKEN }}
#          if [ "${env.DRY_RUN}" = "true" ]; then
#            echo "Running npm publish in dry-run mode"
#            npm publish --access public --dry-run
#          else
#            npm publish --access public
#          fi
#        env:
#          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
