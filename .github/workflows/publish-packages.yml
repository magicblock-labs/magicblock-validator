name: Publish ephemeral validator packages

on:
  release:
    types: [published]
  push:
    branches:
      - 'release/v*'
  workflow_dispatch:
    inputs:
      release_version:
        description: 'The release version'
        required: true
        default: 'v0.1.0'

jobs:
  publish-binaries:
    name: Publish Binaries
    runs-on: ${{ matrix.build.os }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - {
            NAME: linux-x64-glibc,
            OS: ubuntu-latest,
            TOOLCHAIN: stable,
            TARGET: x86_64-unknown-linux-gnu
          }
          - {
            NAME: linux-arm64-glibc,
            OS: arm64,
            TOOLCHAIN: stable,
            TARGET: aarch64-unknown-linux-gnu
          }
          - {
            NAME: win32-x64-msvc,
            OS: windows-latest,
            TOOLCHAIN: stable,
            TARGET: x86_64-pc-windows-msvc
          }
          - {
            NAME: darwin-x64,
            OS: macos-latest,
            TOOLCHAIN: stable,
            TARGET: x86_64-apple-darwin
          }
          - {
            NAME: darwin-arm64,
            OS: macos-latest,
            TOOLCHAIN: stable,
            TARGET: aarch64-apple-darwin
          }
    steps:
      - name: Checkout this magicblock-validator
        uses: actions/checkout@v4
        with:
          path: magicblock-validator

      - uses: ./magicblock-validator/.github/actions/setup-build-env
        with:
          build_cache_key_name: "magicblock-validator-ci-publish-v000"
          rust_toolchain_release: "1.85.0"
          github_access_token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install target
        if: matrix.build.TARGET != matrix.build.HOST_TARGET
        run: rustup target add ${{ matrix.build.TARGET }}
        shell: bash

      - name: Set DRY_RUN by default
        shell: bash
        run: echo "DRY_RUN=true" >> $GITHUB_ENV

      - name: Unset DRY_RUN for releases
        shell: bash
        run: echo "DRY_RUN=false" >> $GITHUB_ENV
        if: github.event_name == 'release' && github.event.action == 'published'

      - name: Set up GCC
        if: matrix.build.OS == 'ubuntu-latest'
        uses: egor-tensin/setup-gcc@v1.3
        with:
          version: latest

      - name: Install build dependencies
        if: startsWith(matrix.build.OS, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libclang-dev protobuf-compiler cmake pkg-config libssl-dev ca-certificates openssh-client libudev-dev

      - name: Build (linux/macos/windows)
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path=magicblock-validator/Cargo.toml --release --locked --target ${{ matrix.build.TARGET }}

      - name: Check versions are aligned
        run: |
          cd magicblock-validator/.github && ./version-align.sh --check

      - name: Build the NPM package
        shell: bash
        run: |
          cd magicblock-validator
          bin="ephemeral-validator"
          mv target/${{ matrix.build.TARGET }}/release/rpc target/${{ matrix.build.TARGET }}/release/${bin}
          node_os=$(echo "${{ matrix.build.NAME }}" | cut -d '-' -f1)
          export node_os
          node_arch=$(echo "${{ matrix.build.NAME }}" | cut -d '-' -f2)
          export node_arch
          export node_version="${{ env.RELEASE_VERSION }}"
          if [ "${{ matrix.build.OS }}" = "windows-latest" ]; then
            export node_pkg="${bin}-windows-${node_arch}"
          else
            export node_pkg="${bin}-${node_os}-${node_arch}"
          fi
          echo "node_pkg=${node_pkg}" >> $GITHUB_ENV
          mkdir -p "${node_pkg}/bin"
          envsubst < .github/packages/npm-package/package.json.tmpl > "${node_pkg}/package.json"
          cat "${node_pkg}/package.json"
          if [ "${{ matrix.build.OS }}" = "windows-latest" ]; then
            bin="${bin}.exe"
          fi
          echo "bin_name=${bin}" >> $GITHUB_ENV
          cp "target/${{ matrix.build.TARGET }}/release/${bin}" "${node_pkg}/bin"
          release_name="ephemeral-validator-${{ matrix.build.NAME }}"
          if [ "${{ matrix.build.OS }}" = "windows-latest" ]; then
            release_name="${release_name}.exe"
          fi
          echo "release_name=${release_name}" >> $GITHUB_ENV
          mv "target/${{ matrix.build.TARGET }}/release/${bin}" "target/${{ matrix.build.TARGET }}/release/${release_name}"

      - name: Publish binary to GitHub release
        if: ${{ env.DRY_RUN == 'false' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: magicblock-validator/target/${{ matrix.build.TARGET }}/release/${{ env.release_name }}
          overwrite: true
          tag: "v${{ env.RELEASE_VERSION }}"
          release_name: "v${{ env.RELEASE_VERSION }}"
          asset_name: "${{ env.release_name }}"

      - name: Publish the NPM package
        run: |
          cd magicblock-validator
          echo "DRY_RUN=${{ env.DRY_RUN }}"
          cd ${{ env.node_pkg }}
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm set //registry.npmjs.org/:_authToken ${{ secrets.NPM_TOKEN }}
          if [ "${{ env.DRY_RUN }}" = "true" ]; then
            echo "Running npm publish in dry-run mode"
            npm publish --access public --dry-run
          else
            npm publish --access public
          fi
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-wrapper-npm-package:
    name: Publish wrapper NPM packages
    runs-on: ubuntu-22.04
    needs: publish-binaries
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set DRY_RUN by default
        shell: bash
        run: echo "DRY_RUN=true" >> $GITHUB_ENV

      - name: Unset DRY_RUN for releases
        shell: bash
        run: echo "DRY_RUN=false" >> $GITHUB_ENV
        if: github.event_name == 'release' && github.event.action == 'published'

      - name: Publish the NPM package
        shell: bash
        run: |
          cd .github/packages/npm-package
          npm install
          npm run build
          cd lib
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm set //registry.npmjs.org/:_authToken ${{ secrets.NPM_TOKEN }}
          if [ "${{ env.DRY_RUN }}" = "true" ]; then
            echo "Running npm publish in dry-run mode"
            npm publish --access public --dry-run
          else
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}